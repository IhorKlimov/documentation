{
  "classes" : [
    {
      "declared" : "LYRActor.h",
      "properties" : [
        {
          "declared" : "LYRActor.h",
          "declaration" : "@property (nonatomic, readonly, nullable) NSString *LYR_QUERYABLE_FROM ( LYRMessage LYR_QUERYABLE_FROM ( LYRConversation )",
          "comment" : "The userID of the authenticated user who sent the message.  Previously sentByUserID.",
          "name" : ")",
          "discussion" : "The userID property is queryable via the LYRPredicateOperatorIsEqualTo and LYRPredicateOperatorIsNotEqualTo predicate operators."
        }
      ],
      "name" : "LYRActor",
      "inherits" : "NSObject"
    },
    {
      "declared" : "LYRProgress.h",
      "methods" : {
        "class" : [
          {
            "declared" : "LYRProgress.h",
            "declaration" : "+ (nonnull instancetype)aggregateProgressWithProgresses:(nullable NSArray *)progresses",
            "comment" : "Returns a new instance of aggregate progress object.",
            "name" : "aggregateProgressWithProgresses:",
            "parameters" : [
              {
                "name" : "progresses",
                "description" : "An array of {@link LYRProgress} instances."
              }
            ]
          }
        ],
        "instance" : [
          {
            "declared" : "LYRProgress.h",
            "declaration" : "- (void)addProgress:(nonnull LYRProgress *)progress",
            "comment" : "progress An instance of {@link LYRProgress} to add to the aggregate.",
            "name" : "addProgress:"
          }
        ]
      },
      "name" : "LYRAggregateProgress",
      "inherits" : "LYRProgress : NSObject"
    },
    {
      "name" : "LYRAnnouncement",
      "declared" : "LYRAnnouncement.h",
      "inherits" : "LYRMessage : NSObject"
    },
    {
      "declared" : "LYRClient.h",
      "properties" : [
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, copy, readonly, nonnull) NSURL *appID",
          "comment" : "The app key.",
          "name" : "appID"
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, readonly, nullable) LYRIdentity *authenticatedUser",
          "comment" : "Returns a {@link LYRIdentity} object specifying the user ID of the currently authenticated user or nil if the client is not authenticated.",
          "name" : "authenticatedUser",
          "discussion" : "A client is considered authenticated if it has previously established identity via the submission of an identity token\nand the token has not yet expired. The Layer server may at any time issue an authentication challenge and deauthenticate the client."
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, nullable) NSSet<NSString*> *autodownloadMIMETypes",
          "comment" : "Configures the set of MIME Types for {@link LYRMessagePart} objects that will be automatically downloaded upon synchronization.",
          "name" : "autodownloadMIMETypes",
          "discussion" : "A value of nil indicates that all content is to be downloaded automatically and an empty NSSet indicates that no content should be. The default value is a set containing the MIME Type @\"text\/plain\". Message parts belonging to latest messages will be auto-downloaded first."
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic) LYRSize autodownloadMaximumContentSize",
          "comment" : "Configures the maximum size (in bytes) for {@link LYRMessagePart} objects that will be automatically downloaded upon synchronization.",
          "name" : "autodownloadMaximumContentSize",
          "discussion" : "The default value is 0."
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic) BOOL backgroundContentTransferEnabled",
          "comment" : "A Boolean value that determines whether or not the client will execute content transfers while the application is in a background state.",
          "name" : "backgroundContentTransferEnabled",
          "discussion" : "In order to utilize background transfers your application must implement the UIApplicateDelegate method application:handleEventsForBackgroundURLSession:completionHandler: and forward calls to the LYRClient method handleBackgroundContentTransfersForSessionWithIdentifier:completion:.> %note% > **Note:** Changes to this flag will not affect any transfers already in progress."
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, readonly) LYRSize currentDiskUtilization",
          "comment" : "Returns the amount of disk space currently being utilized for the storage of downloaded message part content.",
          "name" : "currentDiskUtilization",
          "discussion" : "> %note% > **Note:** The property is not updated in real-time, it may time some amount of time for it to update.Utilization may periodically peak above the configured diskCapacity while synchronization or downloads are in progress, but will be rebalanced once all operations\nhave completed."
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) LYRSession *currentSession",
          "comment" : "The current session for the client.",
          "name" : "currentSession",
          "discussion" : "When a new LYRClient instance is initialized, it will check for an existing, persisted session. If a session exists, it will resume that session. If not, a new one will be created."
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic) BOOL debuggingEnabled",
          "comment" : "When YES, LayerKit will log detailed debugging information to both the XCode debugger and the file system.",
          "name" : "debuggingEnabled",
          "discussion" : "When debugging is enabled, all components will begin to synchronously log detailed information to both the file system and the debugger."
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, weak, nullable) id<LYRClientDelegate> delegate",
          "comment" : "The object that acts as the delegate of the receiving client.",
          "name" : "delegate"
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, assign) LYRSize diskCapacity",
          "comment" : "Specifies the maximum amount of disk space (in bytes) that may be utilized for storing downloaded message part content. A value of zero (the default) indicates that\nan unlimited amount of disk space may be utilized.",
          "name" : "diskCapacity",
          "discussion" : "Once current disk utilization of downloaded message part content exceeds the maximum capacity the system will delete content on a least recently used basis until\nthe total utilization is 80% of the configured disk capacity. Note that auto-downloaded content that gets deleted is not automatically downloaded again."
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, readonly) BOOL isConnected",
          "comment" : "Returns a Boolean value that indicates if the client is connected to Layer.",
          "name" : "isConnected"
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, readonly) BOOL isConnecting",
          "comment" : "Returns a Boolean value that indicates if the client is in the process of connecting to Layer.",
          "name" : "isConnecting"
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, readonly, nullable) NSOrderedSet<LYRPolicy*> *policies",
          "comment" : "Returns the ordered set of {@link LYRPolicy} objects governing the behavior of the client.\n",
          "name" : "policies"
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) NSOrderedSet<LYRSession*> *sessions",
          "comment" : "The set of sessions that can be used with the client.",
          "name" : "sessions",
          "discussion" : "LYRClient instances can maintain multiple sessions at any given time. Each session is tied to a single, distinct, authenticated user."
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, readonly) LYRClientSynchronizationPolicy synchronizationPolicy",
          "comment" : "The synchronization policy the client was initialized with.",
          "name" : "synchronizationPolicy"
        },
        {
          "declared" : "LYRClient.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) NSDictionary *synchronizationPolicyOptions",
          "comment" : "The synchronization policy options the client was initialized with.",
          "name" : "synchronizationPolicyOptions"
        }
      ],
      "comment" : "The LYRClient class and related classes provide an API for rich messaging via the Layer platform. This API supports the exchange of multi-part Messages within multi-user Conversations and advanced features such\nas mutation of the participants, deletion of messages or the entire conversation, and the attachment of free-form user defined metadata. The API is sychronization based, fully supporting offline usage and providing full access\nto the history of messages across devices.",
      "name" : "LYRClient",
      "inherits" : "NSObject",
      "methods" : {
        "class" : [
          {
            "parameters" : [
              {
                "name" : "appID",
                "description" : "An app id url obtained from the Layer Developer Portal. {@link https:\/\/developer.layer.com\/projects}"
              },
              {
                "name" : "options",
                "description" : "Options to the client initialization. @see LYRClientOptionSynchronizationPolicy."
              }
            ],
            "return" : "Returns a newly created Layer client object, or nil in the case the client cannot not be initialized due to file protection.",
            "discussion" : "> %warning% > **Warning:** Throws NSInternalInconsistencyException when creating another Layer Client instance with the same appID value under the same process (application).\nHowever multiple instances of Layer Client with the same appID are allowed if running the code under Unit Tests.  Make sure to initialize the client when the\nfile access is available if the app uses NSFileProtection.",
            "declared" : "LYRClient.h",
            "comment" : "Creates and returns a new Layer client instance.",
            "name" : "clientWithAppID:options:",
            "declaration" : "+ (nullable instancetype)clientWithAppID:(nonnull NSURL *)appID options:(nullable NSDictionary<NSString*,id> *)options"
          }
        ],
        "instance" : [
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (BOOL)addPolicies:(nonnull NSSet<LYRPolicy*> *)policies error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Adds the given policies to the receiver.",
            "name" : "addPolicies:error:",
            "return" : "A Boolean value that indicates if the given policies were added.",
            "parameters" : [
              {
                "name" : "policies",
                "description" : "The set of policies to be added to the client."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error that upon failure is set to an error object describing the policy could not be added."
              }
            ]
          },
          {
            "parameters" : [
              {
                "name" : "identityToken",
                "description" : "A string object encoding a JSON Web Signature that asserts a set of claims about the identity of the client. Must be obtained from a remote identity\nprovider and include a nonce value that was previously obtained by a call to requestAuthenticationNonceWithCompletion: or via a server initiated authentication challenge."
              },
              {
                "name" : "completion",
                "description" : "A block to be called upon completion of the asynchronous request for authentication. The block takes two parameters: an {@link LYRIdentity} object with the remote user ID that\nwas authenticated (or nil if authentication was unsuccessful) and an error object that upon failure describes the nature of the failure."
              }
            ],
            "discussion" : "Authenticating a Layer client requires the submission of an Identity Token from a remote backend application that has been designated to act as an\nIdentity Provider on behalf of your application. The Identity Token is a JSON Web Signature (JWS) string that encodes a cryptographically signed set of claims\nabout the identity of a Layer client. An Identity Token must be obtained from your provider via an application defined mechanism (most commonly a JSON over HTTP\nrequest). Once an Identity Token has been obtained, it must be submitted to Layer via this method in ordr to authenticate the client and begin utilizing communication\nservices. If and identity token is submitted with a userID for which the client already has an authenticated session, that session will be resumed. Upon successful authentication, the client remains in an authenticated state until explicitly deauthenticated by a call to deauthenticateWithCompletion: or\nvia a server-issued authentication challenge.",
            "declared" : "LYRClient.h",
            "see" : [
              "{@link http:\/\/tools.ietf.org\/html\/draft-ietf-jose-json-web-signature-25}"
            ],
            "comment" : "Authenticates the client by submitting an Identity Token to Layer for evaluation.",
            "name" : "authenticateWithIdentityToken:completion:",
            "declaration" : "- (void)authenticateWithIdentityToken:(nonnull NSString *)identityToken completion:(nonnull void ( ^ ) ( LYRIdentity *_Nullable authenticatedUser , NSError *_Nullable error ))completion"
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)captureDebugSnapshotWithCompletion:(nonnull void ( ^ ) ( NSURL *_Nullable snapshotPath , NSError *_Nullable error ))completion",
            "comment" : "Captures a debug snapshot of the current state of the Layer powered application and persists it to the file system.",
            "name" : "captureDebugSnapshotWithCompletion:",
            "discussion" : "The debug snapshot is a zip file containing the following: 1. A JSON dump of diagnostic information about the LYRClient 2. A copy of the local database, 3. A copy of any accumulated log files.",
            "parameters" : [
              {
                "name" : "completion",
                "description" : "A block to be called upon completion of the asynchronous request for a debug snapshot. The block takes one parameter: an NSURL location of the snapshot on the file system."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)connectWithCompletion:(nullable void ( ^ ) ( BOOL success , NSError *_Nullable error ))completion",
            "comment" : "Signals the receiver to establish a network connection and initiate synchronization.",
            "name" : "connectWithCompletion:",
            "discussion" : "If the client has previously established an authenticated identity then the session is resumed and synchronization is activated.",
            "parameters" : [
              {
                "name" : "completion",
                "description" : "An optional block to be executed once connection state is determined. The block has no return value and accepts two arguments: a Boolean value indicating if the connection was made\nsuccessfully and an error object that, upon failure, indicates the reason that connection was unsuccessful."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)countForQuery:(nonnull LYRQuery *)query completion:(nonnull void ( ^ ) ( NSUInteger count , NSError *_Nullable error ))completion",
            "comment" : "Executes the given query asynchronously and ppasses the result count and error back in a completion block.",
            "name" : "countForQuery:completion:",
            "parameters" : [
              {
                "name" : "query",
                "description" : "The query to execute. Cannot be nil."
              },
              {
                "name" : "completion",
                "description" : "The block that will be passed once Layer has executed the query.  If successful the count will have the count requested in the query, and if unsuccessful error will contain the specific query error."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (NSUInteger)countForQuery:(nonnull LYRQuery *)query error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Executes the given query and returns a count of the number of results.",
            "name" : "countForQuery:error:",
            "return" : "A count of the number of results or NSUIntegerMax if an error occurred.",
            "parameters" : [
              {
                "name" : "query",
                "description" : "The query to execute. Cannot be nil."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error that upon failure is set to an error object describing why execution failed."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)deauthenticateWithCompletion:(nullable void ( ^ ) ( BOOL success , NSError *_Nullable error ))completion",
            "comment" : "Deauthenticates the client, disposing of any previously established user identity and disallowing access to the Layer communication services until a new identity is established. All existing messaging data is purged from the database.",
            "name" : "deauthenticateWithCompletion:",
            "parameters" : [
              {
                "name" : "completion",
                "description" : "A block to be executed when the deauthentication operation has completed. The block has no return value and has two arguments: a Boolean value indicating if deauthentication was successful and an error describing the failure if it was not."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (BOOL)destroySession:(nonnull LYRSession *)session error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Destoys an existing {@link LYRSession} object;",
            "name" : "destroySession:error:",
            "discussion" : "If a client is authenticated during a call to destroySession:error:, the client will immediately deauthenticate.",
            "parameters" : [
              {
                "name" : "session",
                "description" : "The session object that should be destroyed."
              },
              {
                "name" : "error",
                "description" : "An error object describing a failure that has occured."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)disconnect",
            "comment" : "Signals the receiver to end the established network connection.",
            "name" : "disconnect"
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)executeQuery:(nonnull LYRQuery *)query completion:(nonnull void ( ^ ) ( NSOrderedSet<id<LYRQueryable> > *_Nullable resultSet , NSError *_Nullable error ))completion",
            "comment" : "Executes the given query asynchronously and passes the results back in a completion block.",
            "name" : "executeQuery:completion:",
            "parameters" : [
              {
                "name" : "query",
                "description" : "The query to execute. Cannot be nil."
              },
              {
                "name" : "completion",
                "description" : "The block that will be passed once Layer has executed the query.  If successful the resultSet will have the results, and if unsuccessful error will contain the specific query error."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (nullable NSOrderedSet<id<LYRQueryable> > *)executeQuery:(nonnull LYRQuery *)query error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Executes the given query and returns an ordered set of results.",
            "name" : "executeQuery:error:",
            "return" : "An ordered set of query results or nil if an error occurred.",
            "parameters" : [
              {
                "name" : "query",
                "description" : "The query to execute. Cannot be nil."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error that upon failure is set to an error object describing why execution failed."
              }
            ]
          },
          {
            "parameters" : [
              {
                "name" : "userIDs",
                "description" : "A set of userIDs to be followed."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error object that, upon failure, will be set to an error describing why the userIDs could not be followed."
              }
            ],
            "return" : "A Boolean value indicating if the operation of following userIDs was successful.",
            "discussion" : "Successfully following a set of userIDs will post queryable {@link LYRIdentity} objects, with initial state followed equalling NO.  If any identity information\nis available on the Layer platform it will be synchronized to the client when possible.",
            "declared" : "LYRClient.h",
            "comment" : "Follows a set of userIDs and creates local queryable identities.",
            "name" : "followUserIDs:error:",
            "declaration" : "- (BOOL)followUserIDs:(nonnull NSSet<NSString*> *)userIDs error:(NSError *_Nullable *_Nullable)error"
          },
          {
            "parameters" : [
              {
                "name" : "sessionIdentifier",
                "description" : "URL session identifier handed by the application:handleEventsForBackgroundURLSession:completionHandler:."
              },
              {
                "name" : "completion",
                "description" : "The block that will be called once Layer has successfully handled content transfers. It is your responsibility to call the UIApplication delegate method's completion handler. Note that this block is only called if the method returns YES."
              }
            ],
            "return" : "A Boolean value that indicates whether or not the client handled the content transfers for the given background session identifier. YES will be returned if the session identifier refers to a background session that was created by the Layer client, else NO.",
            "discussion" : "> %note% > **Note:** The receiver must be authenticated else a warning will be logged and NO will be returned. The completion is only invoked if the return value is YES.",
            "declared" : "LYRClient.h",
            "comment" : "Handles content transfer events from iOS and synchronizes the client if required.",
            "name" : "handleBackgroundContentTransfersForSession:completion:",
            "declaration" : "- (BOOL)handleBackgroundContentTransfersForSession:(nonnull NSString *)sessionIdentifier completion:(nonnull void ( ^ ) ( NSArray<LYRObjectChange*> *_Nullable changes , NSError *_Nullable error ))completion"
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (BOOL)insertPolicy:(nonnull LYRPolicy *)policy atIndex:(NSUInteger)index error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Inserts the given policy in the receiver's policy set at the specified index.",
            "name" : "insertPolicy:atIndex:error:",
            "parameters" : [
              {
                "name" : "policy",
                "description" : "The policy to be added to the client."
              },
              {
                "name" : "index",
                "description" : "The index at which to insert the policy."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error that upon failure is set to an error object describing the policy could not be added."
              }
            ]
          },
          {
            "parameters" : [
              {
                "name" : "messages",
                "description" : "A set of messages to be marked as read or nil."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error object that, upon failure, will be set to an error describing why the message could not be sent."
              }
            ],
            "return" : "YES if the messages were marked as read or NO if the operation failed.",
            "discussion" : "The operation will ignore messages that have previously been marked as read.",
            "declared" : "LYRClient.h",
            "comment" : "Marks a set of messages as being read by the current user. If nil the operation will mark all unread messsages as being read by the current user.",
            "name" : "markMessagesAsRead:error:",
            "declaration" : "- (BOOL)markMessagesAsRead:(nonnull NSSet<LYRMessage*> *)messages error:(NSError *_Nullable *_Nullable)error"
          },
          {
            "parameters" : [
              {
                "name" : "participants",
                "description" : "A set of participants with which to initialize the new Conversation."
              },
              {
                "name" : "options",
                "description" : "A dictionary of options to apply to the conversation."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error that upon failure is set to an error object describing why execution failed."
              }
            ],
            "return" : "The newly created Conversation or nil if an attempt is made to create a conversation with a distinct participants list, but one already exists. The existing conversation will be set as the value for the LYRExistingDistinctConversationKey in the userInfo dictionary of the error parameter.",
            "discussion" : "This method will create a new {@link LYRConversation} instance. Creating new message instances with a new {@link LYRConversation} object instance and sending them will also result in creation of a new conversation for other participants. An attempt to create a 1:1 conversation with a blocked participant will result in an error. If you wish to ensure that only one Conversation exists for a set of participants then set the value for the LYRConversationOptionsDistinctByParticipantsKey key to true in the options parameter.",
            "declared" : "LYRClient.h",
            "comment" : "Creates a new Conversation with the given set of participants.",
            "name" : "newConversationWithParticipants:options:error:",
            "declaration" : "- (nullable LYRConversation *)newConversationWithParticipants:(nonnull NSSet<NSString*> *)participants options:(nullable NSDictionary<NSString*,id> *)options error:(NSError *_Nullable *_Nullable)error"
          },
          {
            "parameters" : [
              {
                "name" : "messageParts",
                "description" : "An array of {@link LYRMessagePart} objects specifying the content of the message. Cannot be nil or empty."
              },
              {
                "name" : "options",
                "description" : "A dictionary of options to apply to the message."
              }
            ],
            "return" : "A new message that is ready to be sent.\n@raises NSInvalidArgumentException Raised if conversation is nil or messageParts is empty.",
            "discussion" : "This method will allow a maximum of 1000 parts per message.",
            "declared" : "LYRClient.h",
            "comment" : "Creates and returns a new message with the given set of message parts.",
            "name" : "newMessageWithParts:options:error:",
            "declaration" : "- (nullable LYRMessage *)newMessageWithParts:(nonnull NSArray<LYRMessagePart*> *)messageParts options:(nullable NSDictionary<NSString*,id> *)options error:(NSError *_Nullable *_Nullable)error"
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (nullable LYRSession *)newSessionWithIdentifier:(nullable NSString *)identifier error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Creates and returns a new {@link LYRSession} object with the supplied identifier;",
            "name" : "newSessionWithIdentifier:error:",
            "discussion" : "Applications can create an unlimited number of sessions. If a session already exists with the supplied identitifer, the method will return nil and the existing seesion can be found under the NSRecoveryAttempterErrorKey in the userInfo dictionary of the error.",
            "parameters" : [
              {
                "name" : "identifier",
                "description" : "The identifier to be used for the session. If an identifier is not supplied, one will be created."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (nullable LYRQueryController *)queryControllerWithQuery:(nonnull LYRQuery *)query error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Creates and returns a new query controller with the given query.",
            "name" : "queryControllerWithQuery:error:",
            "return" : "A newly created query controller.",
            "parameters" : [
              {
                "name" : "query",
                "description" : "The query to create a controller with."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error that upon failure is set to a NSError object describing why query controller creation failed."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (BOOL)removePolicies:(nonnull NSSet<LYRPolicy*> *)policies error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Removes the specified policies from the receiver.",
            "name" : "removePolicies:error:",
            "return" : "A Boolean value that indicates if the given policies were removed.",
            "parameters" : [
              {
                "name" : "error",
                "description" : "A pointer to an error that upon failure is set to an error object describing the policy could not be added."
              },
              {
                "name" : "policy",
                "description" : "The set of polices to be removed from the client."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)requestAuthenticationNonceWithCompletion:(nonnull void ( ^ ) ( NSString *_Nullable nonce , NSError *_Nullable error ))completion",
            "comment" : "Requests an authentication nonce from Layer.",
            "name" : "requestAuthenticationNonceWithCompletion:",
            "discussion" : "Authenticating a Layer client requires that an Identity Token be obtained from a remote backend application that has been designated to act as an\nIdentity Provider on behalf of your application. When requesting an Identity Token from a provider, you are required to provide a nonce value that will be included\nin the cryptographically signed data that comprises the Identity Token. This method asynchronously requests such a nonce value from Layer.> %warning% > **Warning:** Nonce values can be issued by Layer at any time in the form of an authentication challenge. You must be prepared to handle server issued nonces as well as those\nexplicitly requested by a call to requestAuthenticationNonceWithCompletion:.",
            "parameters" : [
              {
                "name" : "completion",
                "description" : "A block to be called upon completion of the asynchronous request for a nonce. The block takes two parameters: the nonce value that was obtained (or nil\nin the case of failure) and an error object that upon failure describes the nature of the failure."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)setLogLevel:(LYRLogLevel)level forComponent:(LYRLogComponent)component",
            "comment" : "Configures the log level for the specified component",
            "name" : "setLogLevel:forComponent:",
            "parameters" : [
              {
                "name" : "level",
                "description" : "The log level to be set for the component."
              },
              {
                "name" : "component",
                "description" : "The component to configure."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (BOOL)switchToSession:(nonnull LYRSession *)session error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Informs the client that it should switch to the supplied session.",
            "name" : "switchToSession:error:",
            "discussion" : "If a client is connected and authenticated during a call to switchSession:error:, the client will immediately deauthenticate. If the client has previously been authenticated with the supplied session, the client will restore its authentication state.",
            "parameters" : [
              {
                "name" : "session",
                "description" : "The {@link LYRSession} instance the client should switch to."
              },
              {
                "name" : "error",
                "description" : "An error object describing a failure that has occured."
              }
            ]
          },
          {
            "parameters" : [
              {
                "name" : "userInfo",
                "description" : "The user info dictionary received from the UIApplicaton delegate method application:didReceiveRemoteNotification:fetchCompletionHandler:'s userInfo parameter."
              },
              {
                "name" : "completion",
                "description" : "The block that will be called once Layer has successfully downloaded new data associated with the userInfo dictionary passed in. It is your responsibility to call the UIApplication delegate method's fetch completion handler with an appropriate fetch result for the given objects. Note that this block is only called if the method returns YES."
              }
            ],
            "return" : "A Boolean value that determines whether the push was handled. Will be NO if this was not a push notification meant for Layer or if called while the application is active, and the completion block will not be called.",
            "discussion" : "The completion block will either return an error or one or both of the resulting objects depending on the information provided in the userInfo parameter.  In valid cases, just message is returned for an announcement payload, and both message and conversation for a message payload.> %note% > **Note:** The receiver must be authenticated else a warning will be logged and NO will be returned. The completion is only invoked if the return value is YES.",
            "declared" : "LYRClient.h",
            "comment" : "Inspects an incoming push notification and synchronizes the client if it was sent by Layer.",
            "name" : "synchronizeWithRemoteNotification:completion:",
            "declaration" : "- (BOOL)synchronizeWithRemoteNotification:(nonnull NSDictionary *)userInfo completion:(nonnull void ( ^ ) ( LYRConversation *_Nullable conversation , LYRMessage *_Nullable message , NSError *_Nullable error ))completion"
          },
          {
            "parameters" : [
              {
                "name" : "userIDs",
                "description" : "A set of userIDs to be unfollowed."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error object that, upon failure, will be set to an error describing why the userIDs could not be unfollowed."
              }
            ],
            "return" : "A Boolean value indicating if the operation of unfollowing userIDs was successful.",
            "discussion" : "userIDs that are conversation participants cannot be explicity unfollowed, and any attempt to do so will be ignored.",
            "declared" : "LYRClient.h",
            "comment" : "Unfollows a set of userIDs.",
            "name" : "unfollowUserIDs:error:",
            "declaration" : "- (BOOL)unfollowUserIDs:(nonnull NSSet<NSString*> *)userIDs error:(NSError *_Nullable *_Nullable)error"
          },
          {
            "parameters" : [
              {
                "name" : "deviceToken",
                "description" : "An NSData object containing the device token or nil."
              },
              {
                "name" : "error",
                "description" : "A reference to an NSError object that will contain error information in case the action was not successful."
              }
            ],
            "return" : "A Boolean value that determines whether the action was successful.",
            "discussion" : "The device token is expected to be either an NSData object returned by the method application:didRegisterForRemoteNotificationsWithDeviceToken: or nil. If an NSData object is provided, the device token is cached locally and is sent to Layer cloud automatically when the connection is established. If nil, all device tokens that are associated with the currently authenticated and the current device will be deleted. Device tokens associated with other devices will not be deleted.",
            "declared" : "LYRClient.h",
            "comment" : "Tells the receiver to update the device token used to deliver Push Notifications to the current device via the Apple Push Notification Service.",
            "name" : "updateRemoteNotificationDeviceToken:error:",
            "declaration" : "- (BOOL)updateRemoteNotificationDeviceToken:(nullable NSData *)deviceToken error:(NSError *_Nullable *_Nullable)error"
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (BOOL)validatePolicy:(nonnull LYRPolicy *)policy error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Validates the given policy to determine if it represents a valid configuration that can be added to the receiver.",
            "name" : "validatePolicy:error:",
            "return" : "A Boolean value that indicates if the given policy is valid or not.",
            "parameters" : [
              {
                "name" : "policy",
                "description" : "The policy to validate."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error that upon failure is set to an error object describing why validation was unsuccessful."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)waitForCreationOfObjectWithIdentifier:(nonnull NSURL *)objectIdentifier timeout:(NSTimeInterval)timeout completion:(nonnull void ( ^ ) ( id _Nullable object , NSError *_Nullable error ))completion",
            "comment" : "Waits for the creation of an object with the specified identifier and calls the completion block with the object if found or an error if it times out.",
            "name" : "waitForCreationOfObjectWithIdentifier:timeout:completion:",
            "parameters" : [
              {
                "name" : "objectIdentifier",
                "description" : "The identifier of the object expected to be created."
              },
              {
                "name" : "timeout",
                "description" : "The specified time the method should wait for the object creation before timing out."
              },
              {
                "name" : "completion",
                "description" : "The block that will be called once the operation completes with either the expected object or an error."
              }
            ]
          }
        ]
      }
    },
    {
      "declared" : "LYRPredicate.h",
      "properties" : [
        {
          "declared" : "LYRPredicate.h",
          "declaration" : "@property (nonatomic, readonly) LYRCompoundPredicateType compoundPredicateType",
          "comment" : "The compound predicate type for the receiver.",
          "name" : "compoundPredicateType"
        },
        {
          "declared" : "LYRPredicate.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) NSArray *subpredicates",
          "comment" : "The receiver's subpredicates;",
          "name" : "subpredicates"
        }
      ],
      "methods" : {
        "class" : [
          {
            "declared" : "LYRPredicate.h",
            "declaration" : "+ (nonnull instancetype)compoundPredicateWithType:(LYRCompoundPredicateType)compoundPredicateType subpredicates:(nonnull NSArray<__kindofLYRPredicate*> *)subpredicates",
            "comment" : "Creates and returns a new compound predicate with the given type and subpredicates in a given array.\n@property compoundPredicateType Compound predicate type, @see {@link LYRCompoundPredicateType}.\n@property subpredicates An array of {@link LYRPredicate} instances.",
            "name" : "compoundPredicateWithType:subpredicates:",
            "return" : "A newly created compound predicate object."
          }
        ]
      },
      "name" : "LYRCompoundPredicate",
      "inherits" : "LYRPredicate : NSObject",
      "conforms" : "NSCoding<br \/>NSCopying"
    },
    {
      "declared" : "LYRConversation.h",
      "properties" : [
        {
          "declared" : "LYRConversation.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) NSURL *LYR_QUERYABLE_PROPERTY",
          "comment" : "A unique identifier assigned to every conversation by Layer.",
          "name" : "LYR_QUERYABLE_PROPERTY",
          "discussion" : "The identifier property is queryable via the LYRPredicateOperatorIsEqualTo, LYRPredicateOperatorIsNotEqualTo, LYRPredicateOperatorIsIn, and LYRPredicateOperatorIsNotIn operators."
        },
        {
          "declared" : "LYRConversation.h",
          "declaration" : "@property (nonatomic, readonly) BOOL deliveryReceiptsEnabled",
          "comment" : "Returns a Boolean value that indicates if delivery receipts are enabled. When YES, clients will write delivery receipts and a delineation will be made between LYRRecipientStatusSent\nand LYRRecipientStatusDelivered. When NO, messages will remain in the LYRRecipientStatusSent state until explicitly marked as read.",
          "name" : "deliveryReceiptsEnabled",
          "discussion" : "When delivery receipts are enabled, client devices will acknowledge delivery of messages by writing a synchronized delivery receipt. This provides more granular message\nstatus, but results in more synchronization activity. Developers are encouraged to disabled delivery receipts if the delivery status is unimportant or unused."
        },
        {
          "declared" : "LYRConversation.h",
          "declaration" : "@property (nonatomic, readonly) BOOL isDeleted",
          "comment" : "Returns a Boolean value that indicates if the receiver has been deleted.",
          "name" : "isDeleted"
        },
        {
          "declared" : "LYRConversation.h",
          "declaration" : "@property (nonatomic, readonly) NSUInteger totalNumberOfMessages",
          "comment" : "Property gives the total number of messages in the conversation, even in case when not all the messages have been synchronized with the client.",
          "name" : "totalNumberOfMessages"
        },
        {
          "declared" : "LYRConversation.h",
          "declaration" : "@property (nonatomic, readonly) NSUInteger totalNumberOfUnreadMessages",
          "comment" : "Property gives the total number of unread messages in the conversation, even in case when not all the messages have been synchronized with the client.",
          "name" : "totalNumberOfUnreadMessages"
        }
      ],
      "methods" : {
        "instance" : [
          {
            "declared" : "LYRConversation.h",
            "declaration" : "- (BOOL)addParticipants:(nonnull NSSet<NSString*> *)participants error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Adds participants to a given conversation.",
            "name" : "addParticipants:error:",
            "return" : "A Boolean value indicating if the operation of adding participants was successful.",
            "parameters" : [
              {
                "name" : "participants",
                "description" : "A set of providerUserID in a form of NSString objects."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error object that, upon failure, will be set to an error describing why the participants could not be added to the conversation."
              }
            ]
          },
          {
            "parameters" : [
              {
                "name" : "error",
                "description" : "A pointer to an error that upon failure is set to an error object describing why the deletion failed."
              },
              {
                "name" : "mode",
                "description" : "The deletion mode, specifying how the message is to be deleted (i.e. for only the currently authenticated user' devices or synchronized across participants)."
              }
            ],
            "return" : "A Boolean value indicating if the request to delete the conversation was submitted for synchronization.",
            "discussion" : "This method deletes a conversation and all associated messages for all current participants.",
            "declared" : "LYRConversation.h",
            "comment" : "Deletes a conversation in the specified mode.",
            "name" : "delete:error:",
            "declaration" : "- (BOOL)delete:(LYRDeletionMode)deletionMode error:(NSError *_Nullable *_Nullable)error"
          },
          {
            "declared" : "LYRConversation.h",
            "declaration" : "- (void)deleteValueForMetadataAtKeyPath:(nonnull NSString *)keyPath",
            "comment" : "Deletes a specific value by key path from the metadata dictionary.",
            "name" : "deleteValueForMetadataAtKeyPath:",
            "parameters" : [
              {
                "name" : "keyPath",
                "description" : "A key path into the metadata dictionary specifying the value to be deleted."
              }
            ]
          },
          {
            "parameters" : [
              {
                "name" : "error",
                "description" : "A pointer to an error that upon failure is set to an error object describing why the deletion failed."
              }
            ],
            "return" : "A Boolean value indicating if the request to leave the conversation was submitted for synchronization.",
            "discussion" : "This method removes the authenticated user from the conversation and deletes the conversation from all of their devices.A user can only leave a conversation if they are a current participant and the conversation has not been deleted.",
            "declared" : "LYRConversation.h",
            "comment" : "Leaves the conversation.",
            "name" : "leave:",
            "declaration" : "- (BOOL)leave:(NSError *_Nullable *_Nullable)error"
          },
          {
            "declared" : "LYRConversation.h",
            "declaration" : "- (BOOL)markAllMessagesAsRead:(NSError *_Nullable *_Nullable)error",
            "comment" : "Marks all messages in the receiver as being read by the current user.",
            "name" : "markAllMessagesAsRead:",
            "return" : "YES if all unread messages were marked as read or NO if an error occurred.",
            "parameters" : [
              {
                "name" : "error",
                "description" : "A pointer to an error object that, upon failure, will be set to an error describing why the messages could not be marked as read."
              }
            ]
          },
          {
            "declared" : "LYRConversation.h",
            "declaration" : "- (BOOL)removeParticipants:(nonnull NSSet<NSString*> *)participants error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Removes participants from a given conversation.",
            "name" : "removeParticipants:error:",
            "return" : "A Boolean value indicating if the operation of removing participants was successful.",
            "parameters" : [
              {
                "name" : "participants",
                "description" : "A set of providerUserID in a form of NSString objects."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error object that, upon failure, will be set to an error describing why the participants could not be removed from the conversation."
              }
            ]
          },
          {
            "parameters" : [
              {
                "name" : "message",
                "description" : "The message to be sent. Cannot be nil."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error object that, upon failure, will be set to an error describing why the message could not be sent."
              }
            ],
            "return" : "A Boolean value indicating if the message passed validation and was enqueued for delivery.\n@raises NSInvalidArgumentException Raised if message is nil.",
            "discussion" : "The message is enqueued for delivery during the next synchronization after basic local validation of the message state is performed. Validation\nthat may be performed includes checking that the maximum number of participants has not been execeeded and that parts of the message do not have an aggregate\nsize in excess of the maximum for a message.",
            "declared" : "LYRConversation.h",
            "comment" : "Sends the specified message.",
            "name" : "sendMessage:error:",
            "declaration" : "- (BOOL)sendMessage:(nonnull LYRMessage *)message error:(NSError *_Nullable *_Nullable)error"
          },
          {
            "declared" : "LYRConversation.h",
            "declaration" : "- (void)sendTypingIndicator:(LYRTypingIndicator)typingIndicator",
            "comment" : "Sends a typing indicator to the conversation.",
            "name" : "sendTypingIndicator:",
            "parameters" : [
              {
                "name" : "typingIndicator",
                "description" : "An {@link LYRTypingIndicator} value indicating the change in typing state to be sent."
              }
            ]
          },
          {
            "declared" : "LYRConversation.h",
            "declaration" : "- (void)setValue:(nullable id)value forMetadataAtKeyPath:(nonnull NSString *)keyPath",
            "comment" : "Sets the value for the specified key path in the metadata dictionary.",
            "name" : "setValue:forMetadataAtKeyPath:",
            "parameters" : [
              {
                "name" : "value",
                "description" : "The string or dictionary value to set for the given key path in the metadata."
              },
              {
                "name" : "keyPath",
                "description" : "A key path into the metadata dictionary specifying where the value is to be set."
              }
            ]
          },
          {
            "declared" : "LYRConversation.h",
            "declaration" : "- (void)setValuesForMetadataKeyPathsWithDictionary:(nonnull NSDictionary<NSString*,id> *)metadata merge:(BOOL)merge",
            "comment" : "Sets multiple values on the metadata using an input dictionary, optionally merging with any existing values.",
            "name" : "setValuesForMetadataKeyPathsWithDictionary:merge:",
            "parameters" : [
              {
                "name" : "metadata",
                "description" : "A dictionary of metadata to assign or merge with the existing metadata."
              },
              {
                "name" : "merge",
                "description" : "A Boolean flag that specifies whether the metadata is to be assigned directly or merged with any existing values."
              }
            ]
          },
          {
            "declared" : "LYRConversation.h",
            "declaration" : "- (BOOL)synchronizeAllMessages:(LYRMessageSyncOptions)messageSyncOption error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Tells the client to synchronize all historic messages or all unread messages that haven't been synchronized with this client yet.",
            "name" : "synchronizeAllMessages:error:",
            "return" : "YES in case the request for the operation was successfull; otherwise NO.",
            "parameters" : [
              {
                "name" : "messageSyncOption",
                "description" : "If used with LYRMessageSyncToFirstUnread, the client will try to only synchronize all messages up to the first unread message found in the conversation;\nif LYRMessageSyncAll is passed, the client will load all historic messages in the conversation."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error object that, upon failure, will be set to an error describing why the synchronization process could not be performed."
              }
            ]
          },
          {
            "declared" : "LYRConversation.h",
            "declaration" : "- (BOOL)synchronizeMoreMessages:(NSUInteger)minimumNumberOfMessages error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Tells the client to synchronize more historic messages that are in the conversation.",
            "name" : "synchronizeMoreMessages:error:",
            "return" : "YES in case the request for the operation was successfull; otherwise NO.",
            "parameters" : [
              {
                "name" : "minimumNumberOfMessages",
                "description" : "The number of historic messages the client should try to fetch during synchronization; value should be greated than zero."
              },
              {
                "name" : "error",
                "description" : "A pointer to an error object that, upon failure, will be set to an error describing why the synchronization process could not be performed."
              }
            ]
          }
        ]
      },
      "name" : "LYRConversation",
      "inherits" : "NSObject",
      "conforms" : "LYRQueryable"
    },
    {
      "declared" : "LYRIdentity.h",
      "properties" : [
        {
          "declared" : "LYRIdentity.h",
          "declaration" : "@property (nonatomic, readonly) NSString *LYR_QUERYABLE_PROPERTY LYR_QUERYABLE_FROM ( LYRMessage )",
          "comment" : "The userID associated with the identity.",
          "name" : ")",
          "discussion" : "The userID property is queryable via the LYRPredicateOperatorIsEqualTo, LYRPredicateOperatorIsNotEqualTo, LYRPredicateOperatorIsIn, and LYRPredicateOperatorIsNotIn operators."
        },
        {
          "declared" : "LYRIdentity.h",
          "declaration" : "@property (nonatomic, readonly) NSURL *LYR_QUERYABLE_PROPERTY",
          "comment" : "A unique identifier for the identity.",
          "name" : "LYR_QUERYABLE_PROPERTY",
          "discussion" : "The identifier property is queryable via the LYRPredicateOperatorIsEqualTo, LYRPredicateOperatorIsNotEqualTo, LYRPredicateOperatorIsIn, and LYRPredicateOperatorIsNotIn operators."
        }
      ],
      "name" : "LYRIdentity",
      "inherits" : "NSObject",
      "conforms" : "LYRQueryable"
    },
    {
      "declared" : "LYRMessage.h",
      "properties" : [
        {
          "declared" : "LYRMessage.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) LYRConversation *LYR_QUERYABLE_PROPERTY LYR_QUERYABLE_FROM ( LYRMessagePart )",
          "comment" : "The conversation that the receiver is a part of.",
          "name" : ")",
          "discussion" : "The conversation property is queryable via the LYRPredicateOperatorIsEqualTo, LYRPredicateOperatorIsNotEqualTo, LYRPredicateOperatorIsIn, and LYRPredicateOperatorIsNotIn operators."
        },
        {
          "declared" : "LYRMessage.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) NSURL *LYR_QUERYABLE_PROPERTY",
          "comment" : "A unique identifier for the message.",
          "name" : "LYR_QUERYABLE_PROPERTY",
          "discussion" : "The identifier property is queryable via the LYRPredicateOperatorIsEqualTo, LYRPredicateOperatorIsNotEqualTo, LYRPredicateOperatorIsIn, and LYRPredicateOperatorIsNotIn operators."
        },
        {
          "declared" : "LYRMessage.h",
          "declaration" : "@property (nonatomic, readonly) BOOL isDeleted",
          "comment" : "Returns a Boolean value that indicates if the receiver has been deleted.",
          "name" : "isDeleted"
        },
        {
          "declared" : "LYRMessage.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) NSArray<LYRMessagePart*> *parts",
          "comment" : "An array of message parts (modeled by the {@link LYRMessagePart} class) that provide access to the content of the receiver.",
          "name" : "parts"
        },
        {
          "declared" : "LYRMessage.h",
          "declaration" : "@property (nonatomic, readonly, nullable) NSDictionary<NSString*NSNumber*> *recipientStatusByUserID",
          "comment" : "Returns a dictionary keyed the user ID of all participants in the Conversation that the receiver belongs to and whose\nvalues are an NSNumber representation of the receipient status ({@link LYRRecipientStatus} value) for their corresponding key.",
          "name" : "recipientStatusByUserID"
        },
        {
          "declared" : "LYRMessage.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) LYRIdentity *sender",
          "comment" : "The sender who sent the message.",
          "name" : "sender",
          "discussion" : "The sender can be an authenticated user or from a platform, specificed by the sender's properties userID and name.  They are mutually exclusive.  Both properties are queryable from LYRMessage."
        }
      ],
      "methods" : {
        "instance" : [
          {
            "declared" : "LYRMessage.h",
            "declaration" : "- (BOOL)delete:(LYRDeletionMode)deletionMode error:(NSError *_Nullable *_Nullable)error",
            "comment" : "Deletes a message in the specified mode.",
            "name" : "delete:error:",
            "return" : "A Boolean value indicating if the request to delete the message was submitted for synchronization.\n@raises NSInvalidArgumentException Raised if message is nil.",
            "parameters" : [
              {
                "name" : "error",
                "description" : "A pointer to an error that upon failure is set to an error object describing why the deletion failed."
              },
              {
                "name" : "mode",
                "description" : "The deletion mode, specifying how the message is to be deleted (i.e. for only the currently authenticated user's devices or synchronized across participants)."
              }
            ]
          },
          {
            "parameters" : [
              {
                "name" : "error",
                "description" : "A pointer to an error object that, upon failure, will be set to an error describing why the message could not be sent."
              }
            ],
            "return" : "YES if the message was marked as read or NO if the message was already marked as read.",
            "discussion" : "If multiple messages must be marked as read, use markMessagesAsRead:error: on {@link LYRClient} or markAllMessagesAsRead:error on {@link LYRConversation} instead.",
            "declared" : "LYRMessage.h",
            "comment" : "Marks the message as being read by the current user.",
            "name" : "markAsRead:",
            "declaration" : "- (BOOL)markAsRead:(NSError *_Nullable *_Nullable)error"
          },
          {
            "declared" : "LYRMessage.h",
            "declaration" : "- (LYRRecipientStatus)recipientStatusForUserID:(nonnull NSString *)userID",
            "comment" : "Retrieves the message state for a given participant in the conversation.",
            "name" : "recipientStatusForUserID:",
            "return" : "An {@link LYRRecipientStatus} value specifying the message status for the given participant or LYRRecipientStatusInvalid if the specified user is not a participant in the conversation.",
            "parameters" : [
              {
                "name" : "userID",
                "description" : "The user ID to retrieve the message status for."
              }
            ]
          }
        ]
      },
      "name" : "LYRMessage",
      "inherits" : "NSObject",
      "conforms" : "LYRQueryable"
    },
    {
      "declared" : "LYRMessagePart.h",
      "properties" : [
        {
          "declared" : "LYRMessagePart.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) NSString *LYR_QUERYABLE_PROPERTY LYR_QUERYABLE_FROM ( LYRMessage )",
          "comment" : "The MIME Type of the content represented by the receiver.",
          "name" : ")"
        },
        {
          "declared" : "LYRMessagePart.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) NSURL *LYR_QUERYABLE_PROPERTY",
          "comment" : "A unique identifier for the message part.",
          "name" : "LYR_QUERYABLE_PROPERTY"
        },
        {
          "declared" : "LYRMessagePart.h",
          "declaration" : "@property (nonatomic, readonly, nullable) NSData *data",
          "comment" : "The content of the receiver as a data object.",
          "name" : "data",
          "discussion" : "Property will be nil if content is not availble. Note that this operation might be expensive if trying to read large data."
        },
        {
          "declared" : "LYRMessagePart.h",
          "declaration" : "@property (nonatomic, readonly, nullable) NSURL *fileURL",
          "comment" : "Returns a NSURL object to the filesystem location of the receiver’s content or nil if the content is not available locally or was transmitted inline.",
          "name" : "fileURL",
          "discussion" : "Property will be nil if content is not availble."
        },
        {
          "declared" : "LYRMessagePart.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) LYRProgress *progress",
          "comment" : "Progress of the current transfer state.",
          "name" : "progress",
          "discussion" : "Property will return a new instance, if previous one has been released from the memory."
        }
      ],
      "methods" : {
        "class" : [
          {
            "declared" : "LYRMessagePart.h",
            "declaration" : "+ (nonnull instancetype)messagePartWithMIMEType:(nonnull NSString *)MIMEType data:(nonnull NSData *)data",
            "comment" : "Creates a message part with the given MIME Type and data.",
            "name" : "messagePartWithMIMEType:data:",
            "return" : "A new message part with the given MIME Type and data.\n@raises NSInvalidArgumentException Raised if MIME Type or data is nil.",
            "parameters" : [
              {
                "name" : "MIMEType",
                "description" : "A MIME Type identifying the type of data contained in the given data object."
              },
              {
                "name" : "data",
                "description" : "The data to be embedded in the mesage part."
              }
            ]
          },
          {
            "declared" : "LYRMessagePart.h",
            "declaration" : "+ (nonnull instancetype)messagePartWithMIMEType:(nonnull NSString *)MIMEType stream:(nonnull NSInputStream *)stream",
            "comment" : "Creates a message part with the given MIME Type and stream of data.",
            "name" : "messagePartWithMIMEType:stream:",
            "return" : "A new message part with the given MIME Type and stream of data.\n@raises NSInvalidArgumentException Raised if MIME Type or stream is nil.",
            "parameters" : [
              {
                "name" : "MIMEType",
                "description" : "A MIME Type identifying the type of data contained in the given data object."
              },
              {
                "name" : "stream",
                "description" : "A stream from which to read the data for the message part."
              }
            ]
          },
          {
            "parameters" : [
              {
                "name" : "text",
                "description" : "The plain text body of the new message part."
              }
            ],
            "return" : "A new message part with the MIME Type text\/plain and a UTF-8 encoded representation of the given input text.\n@raises NSInvalidArgumentException Raised if text is nil.",
            "discussion" : "This is a convience accessor encapsulating the common operation of creating a message part\nwith a plain text data attachment in UTF-8 encoding. It is functionally equivalent to the following example code:\n\n[LYRMessagePart messagePartWithMIMEType:@\"text\/plain\" data:[text dataUsingEncoding:NSUTF8StringEncoding]];",
            "declared" : "LYRMessagePart.h",
            "comment" : "Create a message part with a string of text.",
            "name" : "messagePartWithText:",
            "declaration" : "+ (nonnull instancetype)messagePartWithText:(nonnull NSString *)text"
          }
        ],
        "instance" : [
          {
            "declared" : "LYRMessagePart.h",
            "declaration" : "- (nullable LYRProgress *)downloadContent:(NSError *_Nullable *_Nullable)error",
            "comment" : "Tells the receiver to schedule a download of the content, optionally reporting progress.",
            "name" : "downloadContent:",
            "return" : "An {@link LYRProgress} object that reports the progress of the download operation or nil if the content cannot be downloaded.",
            "parameters" : [
              {
                "name" : "error",
                "description" : "A pointer to an error object that upon failure will be set to an object that indicates why the download could not be started."
              }
            ]
          },
          {
            "declared" : "LYRMessagePart.h",
            "declaration" : "- (nullable NSInputStream *)inputStream",
            "comment" : "Returns a new input stream object for reading the content of the receiver as a stream.",
            "name" : "inputStream",
            "return" : "A new, unopened input stream object configured for reading the content of the part represented by the receiver, if the content is available, otherwise nil."
          },
          {
            "declared" : "LYRMessagePart.h",
            "declaration" : "- (nullable LYRProgress *)purgeContent:(NSError *_Nullable *_Nullable)error",
            "comment" : "Tells the receiver to schedule a purge of the content, optionally reporting progress.",
            "name" : "purgeContent:",
            "return" : "An {@link LYRProgress} object that reports the progress of the content purging operation or nil if the content cannot be purged.",
            "parameters" : [
              {
                "name" : "error",
                "description" : "A pointer to an error object that upon failure will be set to an object that indicates why the content could not be purged."
              }
            ]
          }
        ]
      },
      "name" : "LYRMessagePart",
      "inherits" : "NSObject",
      "conforms" : "LYRQueryable"
    },
    {
      "declared" : "LYRObjectChange.h",
      "properties" : [
        {
          "declared" : "LYRObjectChange.h",
          "declaration" : "@property (nonatomic, readonly, nullable) id afterValue",
          "comment" : "The value of property after the update or nil if the receiver has a change type of LYRObjectChangeTypeCreate or LYRObjectChangeTypeDelete.",
          "name" : "afterValue"
        },
        {
          "declared" : "LYRObjectChange.h",
          "declaration" : "@property (nonatomic, readonly, nullable) id beforeValue",
          "comment" : "The value of property before the update or nil if the receiver has a change type of LYRObjectChangeTypeCreate or LYRObjectChangeTypeDelete.",
          "name" : "beforeValue"
        },
        {
          "declared" : "LYRObjectChange.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) id object",
          "comment" : "The object upon which the change has occured.",
          "name" : "object"
        },
        {
          "declared" : "LYRObjectChange.h",
          "declaration" : "@property (nonatomic, readonly, nullable) NSString *property",
          "comment" : "The name of the property that was updated or nil if the receiver has a change type of LYRObjectChangeTypeCreate or LYRObjectChangeTypeDelete.",
          "name" : "property"
        },
        {
          "declared" : "LYRObjectChange.h",
          "declaration" : "@property (nonatomic, readonly) LYRObjectChangeType type",
          "comment" : "The type of the change that has occured.",
          "name" : "type"
        }
      ],
      "name" : "LYRObjectChange",
      "inherits" : "NSObject"
    },
    {
      "declared" : "LYRPolicy.h",
      "inherits" : "NSObject",
      "conforms" : "NSCoding<br \/>NSCopying",
      "properties" : [
        {
          "declared" : "LYRPolicy.h",
          "declaration" : "@property (nonatomic, copy, nullable) NSString *sentByUserID",
          "comment" : "Specifies the sender of the content that the policy applies to. If nil, the policy applies to all senders.",
          "name" : "sentByUserID"
        },
        {
          "declared" : "LYRPolicy.h",
          "declaration" : "@property (nonatomic, readonly) LYRPolicyType type",
          "comment" : "Returns the type of the receiver.",
          "name" : "type"
        }
      ],
      "comment" : "It is important that you configure your LYRPolicy object appropriately before adding it to a client. Layer client objects make a copy of the policy you provide and use the copy for evaluation and enforcement. The policy objects maintained by the client are immutable and cannot be reconfigured. If you need to modify a policy, then you must make a copy of it, apply the appropriate changes, add the updated policy object to the client and remove the original policy (if appropriate).",
      "name" : "LYRPolicy",
      "methods" : {
        "class" : [
          {
            "parameters" : [
              {
                "name" : "type",
                "description" : "The type of policy to create and return."
              }
            ],
            "return" : "A newly created policy object with the given type.",
            "discussion" : "Upon return, the policy will contain new constraints and as such will apply globally.",
            "declared" : "LYRPolicy.h",
            "comment" : "Creates and returns a new policy with the given type.",
            "name" : "policyWithType:",
            "declaration" : "+ (nonnull instancetype)policyWithType:(LYRPolicyType)type"
          }
        ]
      }
    },
    {
      "declared" : "LYRPredicate.h",
      "properties" : [
        {
          "declared" : "LYRPredicate.h",
          "declaration" : "@property (nonatomic, readonly) LYRPredicateOperator predicateOperator",
          "comment" : "Returns the predicate operator that specifies how the property's value will be compared against the reference value.",
          "name" : "predicateOperator"
        },
        {
          "declared" : "LYRPredicate.h",
          "declaration" : "@property (nonatomic, copy, readonly, nonnull) NSString *property",
          "comment" : "Returns the property whose value the receiver will compare against the reference value.",
          "name" : "property"
        },
        {
          "declared" : "LYRPredicate.h",
          "declaration" : "@property (nonatomic, readonly, nullable) id value",
          "comment" : "Returns the reference value used for comparison.",
          "name" : "value"
        }
      ],
      "methods" : {
        "class" : [
          {
            "declared" : "LYRPredicate.h",
            "declaration" : "+ (nonnull instancetype)predicateWithProperty:(nonnull NSString *)property predicateOperator:(LYRPredicateOperator)predicateOperator value:(nullable id)value",
            "comment" : "Creates and returns a new predicate with the given property, operator, and value.\n@property property The property whose value is to be compared.\n@property predicateOperator The operator that determines how the property's value is compared to the reference value.\n@property value The reference value to use in the comparison.",
            "name" : "predicateWithProperty:predicateOperator:value:",
            "return" : "A newly created predicate object."
          }
        ]
      },
      "name" : "LYRPredicate",
      "inherits" : "NSObject",
      "conforms" : "NSCoding<br \/>NSCopying"
    },
    {
      "declared" : "LYRProgress.h",
      "methods" : {
        "instance" : [
          {
            "declared" : "LYRProgress.h",
            "declaration" : "- (void)cancel",
            "comment" : "Cancels the current operation and its descendants (if cancellable).",
            "name" : "cancel"
          },
          {
            "declared" : "LYRProgress.h",
            "declaration" : "- (void)pause",
            "comment" : "Pauses the current operation and its descendants (if cancellable).",
            "name" : "pause"
          }
        ]
      },
      "comment" : "> %warning% > **Warning:** Please note that when integrating an LYRProgress with a user interface you must take care to ensure that the updates are processed on the main thread. For performance reasons LYRProgress objects do not provide any guarantees about the thread context on which notifications will be delivered.",
      "name" : "LYRProgress",
      "inherits" : "NSObject"
    },
    {
      "declared" : "LYRPushNotificationConfiguration.h",
      "properties" : [
        {
          "declared" : "LYRPushNotificationConfiguration.h",
          "declaration" : "@property (copy, nonatomic, nullable) NSString *actionLocalizationKey",
          "comment" : "If specified, the system displays an alert that includes the Close and View buttons.",
          "name" : "actionLocalizationKey",
          "discussion" : "This property should only be set in a default configuration.  Setting this property in a per recipient configuration raises an exception."
        },
        {
          "declared" : "LYRPushNotificationConfiguration.h",
          "declaration" : "@property (copy, nonatomic, nullable) NSString *alert",
          "comment" : "A string that is the displayed text in the push notification.",
          "name" : "alert"
        },
        {
          "declared" : "LYRPushNotificationConfiguration.h",
          "declaration" : "@property (copy, nonatomic, nullable) NSArray<NSString*> *alertLocalizationArguments",
          "comment" : "An array of variable string values to appear in place of the format specifiers in loc-key.",
          "name" : "alertLocalizationArguments",
          "discussion" : "This property should only be set in a default configuration.  Setting this property in a per recipient configuration raises an exception."
        },
        {
          "declared" : "LYRPushNotificationConfiguration.h",
          "declaration" : "@property (copy, nonatomic, nullable) NSString *alertLocalizationKey",
          "comment" : "A key to an alert-message string in a Localizable.strings file for the current localization.",
          "name" : "alertLocalizationKey",
          "discussion" : "This property should only be set in a default configuration.  Setting this property in a per recipient configuration raises an exception."
        },
        {
          "declared" : "LYRPushNotificationConfiguration.h",
          "declaration" : "@property (copy, nonatomic, nullable) NSDictionary<NSString*NSString*> *apns",
          "comment" : "A dictionary with additional definable APNS values. Can include launch-image key.",
          "name" : "apns"
        },
        {
          "declared" : "LYRPushNotificationConfiguration.h",
          "declaration" : "@property (copy, nonatomic, nullable) NSString *category",
          "comment" : "A string that sets the APNS category for the push.",
          "name" : "category"
        },
        {
          "declared" : "LYRPushNotificationConfiguration.h",
          "declaration" : "@property (copy, nonatomic, nullable) NSDictionary<NSString*NSString*> *data",
          "comment" : "A dictionary with optional additional text key-value pairs to be sent in the push notification.",
          "name" : "data"
        },
        {
          "declared" : "LYRPushNotificationConfiguration.h",
          "declaration" : "@property (copy, nonatomic, nullable) NSString *sound",
          "comment" : "The name of a sound file in the app bundle.",
          "name" : "sound"
        },
        {
          "declared" : "LYRPushNotificationConfiguration.h",
          "declaration" : "@property (copy, nonatomic, nullable) NSString *title",
          "comment" : "A short string describing the purpose of the notification.",
          "name" : "title"
        },
        {
          "declared" : "LYRPushNotificationConfiguration.h",
          "declaration" : "@property (copy, nonatomic, nullable) NSArray<NSString*> *titleLocalizationArguments",
          "comment" : "Variable string values to appear in place of the format specifiers in title-loc-key.",
          "name" : "titleLocalizationArguments",
          "discussion" : "This property should only be set in a default configuration.  Setting this property in a per recipient configuration raises an exception."
        },
        {
          "declared" : "LYRPushNotificationConfiguration.h",
          "declaration" : "@property (copy, nonatomic, nullable) NSString *titleLocalizationKey",
          "comment" : "The key to a title string in the Localizable.strings file for the current localization.",
          "name" : "titleLocalizationKey",
          "discussion" : "This property should only be set in a default configuration.  Setting this property in a per recipient configuration raises an exception."
        }
      ],
      "methods" : {
        "instance" : [
          {
            "declared" : "LYRPushNotificationConfiguration.h",
            "declaration" : "- (void)setPushConfiguration:(nonnull LYRPushNotificationConfiguration *)configuration forParticipant:(nonnull NSString *)participantIdentifier",
            "comment" : "Sets a per participant configuration for the specified participant identifier.",
            "name" : "setPushConfiguration:forParticipant:",
            "discussion" : "This method is used on a default configuration to add per participant customization.  If this method is called on an instance that has per\nparticipant configurations, an exception is raised.",
            "parameters" : [
              {
                "name" : "configuration",
                "description" : "A LYRPushNotificationConfiguration instance with values that override the default configuration."
              },
              {
                "name" : "participantIdentifier",
                "description" : "A string that represents the participant identifier that will receive customized configuration."
              }
            ]
          }
        ]
      },
      "name" : "LYRPushNotificationConfiguration",
      "inherits" : "NSObject"
    },
    {
      "declared" : "LYRQuery.h",
      "inherits" : "NSObject",
      "conforms" : "NSCoding<br \/>NSCopying",
      "properties" : [
        {
          "declared" : "LYRQuery.h",
          "declaration" : "@property (nonatomic) NSUInteger limit",
          "comment" : "The limit configures the maximum number of objects to be returned when the query is executed.",
          "name" : "limit",
          "discussion" : "A value of NSUIntegerMax (the default) indicates that no limit should be applied."
        },
        {
          "declared" : "LYRQuery.h",
          "declaration" : "@property (nonatomic) NSUInteger offset",
          "comment" : "The offset configures the number of rows that are to be skipped in the result set before results are returned.",
          "name" : "offset",
          "discussion" : "The default value is zero. The offset isn't used if the limit is not defined."
        },
        {
          "declared" : "LYRQuery.h",
          "declaration" : "@property (nonatomic, nullable) LYRPredicate *predicate",
          "comment" : "The predicate of the receiver.",
          "name" : "predicate"
        },
        {
          "declared" : "LYRQuery.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) Class<LYRQueryable> queryableClass",
          "comment" : "Returns the queryable class that the receiver is bound to.",
          "name" : "queryableClass"
        },
        {
          "declared" : "LYRQuery.h",
          "declaration" : "@property (nonatomic) LYRQueryResultType resultType",
          "comment" : "Configures how results are returned when the receiver is executed.",
          "name" : "resultType",
          "discussion" : "The default is LYRQueryResultTypeObjects."
        },
        {
          "declared" : "LYRQuery.h",
          "declaration" : "@property (nonatomic, nullable) NSArray<NSSortDescriptor*> *sortDescriptors",
          "comment" : "Configures the sort descriptors used to order the result set.",
          "name" : "sortDescriptors",
          "discussion" : "The sort descriptors specify how the objects returned when the query is executed should be ordered (for example by creation date or index). The sort descriptors are\napplied in the order in which they appear in the sortDescriptors array. A value of nil (the default) means that no explicit sorting is applied and the results are returned in database row order."
        }
      ],
      "comment" : "Instances of LYRQuery are used to query the local database for messaging content. Queries target a specific queryable class\nand apply a predicate that constrains the search. Predicates are expressed in terms of a public property (such as createdAt or isUnread), an operator\n(such as 'is equal to' or 'is greater than or equal to'), and a comparison value. The sort order of the results can be affected by applying one or more\nsort descriptors which also bind to a public property and are applied in either ascending or descending order. To facilitate pagination, queries may be further\nconstrained by applying a limit and offset value. Query results can be returned as either fully realized object instances, object identifiers, or as an aggregate\ncount of the total number of objects matching the query.",
      "name" : "LYRQuery",
      "methods" : {
        "class" : [
          {
            "declared" : "LYRQuery.h",
            "declaration" : "+ (nonnull instancetype)queryWithQueryableClass:(nonnull Class<LYRQueryable>)queryableClass",
            "comment" : "Creates and returns a new query object for the given queryable class.",
            "name" : "queryWithQueryableClass:",
            "return" : "A newly created query object.",
            "parameters" : [
              {
                "name" : "queryableClass",
                "description" : "A class that conforms to the {@link LYRQueryable} protocol that is to be queried."
              }
            ]
          }
        ]
      }
    },
    {
      "declared" : "LYRQueryController.h",
      "properties" : [
        {
          "declared" : "LYRQueryController.h",
          "declaration" : "@property (nonatomic, weak, nullable) id<LYRQueryControllerDelegate> delegate",
          "comment" : "Accesses the receiver's delegate.",
          "name" : "delegate"
        },
        {
          "declared" : "LYRQueryController.h",
          "declaration" : "@property (nonatomic) NSInteger paginationWindow",
          "comment" : "Configures a pagination window for limiting the number of objects that are exposed to the UITableView or UICollectionView object driven via the query controller.\nThe default value is NSIntegerMax, which indicates that no pagination window is to be applied.",
          "name" : "paginationWindow",
          "discussion" : "The pagination window is used to improve the performance of table or collection view objects that utilize a query controller as the model for their associated data source.\nWhen a pagination window is applied, the query controller will expose a subset of the total set of objects that match the query to the consumer. The window is expressed as a signed integer,\nwhere a positive value indicates a window that originates from index 0 (or the \"top\" of the data set) and covers the specified number of objects. In other words, given a query that matches\n100 objects, a pagination window of 25 would display objects from index 0 to 24. Additional objects can be paged into the view on demand by expanding the window size. The pagination window can\nalso be expressed as a negative integer, in which case the window originates from the maximum index of the object collection (or the \"bottom\" of the data set) and extends backward. In the example\nof a collection of 100 objects, a pagination window of -25 would display the objects from index 74 to 99. Negative pagination windows are useful when displaying a paginated collection of messages\nwhere the most recent messages are displayed on the bottom of the view and the chronologically older messages are displayed at the top.\n\nAs the user scrolls to the top or taps a \"Load More\" button, the window can be expanded to performantly load additional messages into the collection. The pagination window can expand as objects are added to the result set due to incoming events."
        },
        {
          "declared" : "LYRQueryController.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) LYRQuery *query",
          "comment" : "Returns the query of the receiver.",
          "name" : "query"
        },
        {
          "declared" : "LYRQueryController.h",
          "declaration" : "@property (nonatomic, readonly) NSUInteger totalNumberOfObjects",
          "comment" : "Returns the total number of objects in the query result set without pagination.",
          "name" : "totalNumberOfObjects",
          "return" : "The number of objects in the result set, without pagination constraints."
        },
        {
          "declared" : "LYRQueryController.h",
          "declaration" : "@property (nonatomic, nullable) NSSet<NSString*> *updatableProperties",
          "comment" : "Configures the set of properties on the queried model class for which LYRQueryControllerChangeTypeUpdate changes will be emitted. The default value is nil, which means that all property changes will generate update notifications to the delegate.",
          "name" : "updatableProperties",
          "discussion" : "The set of updatable properties is used to enhance performance by suppressing the delivery of uninteresting update notifications to the delegate and the subsequent reloading of table or collection view cells. For example, given a collection view that is rendering {@link LYRMessage} objects but does not include read or delivery receipt status on the cell, the developer may wish to limit the updatable properties to isSent and isUnread so that the UI does not refresh as delivery and read receipts are synchronized from other participants of the conversation. A value of nil indicates that no filtering is to be applied and any update to an object in the collection will generate an update callback. An empty set disables all update notifications."
        }
      ],
      "methods" : {
        "instance" : [
          {
            "declared" : "LYRQueryController.h",
            "declaration" : "- (NSUInteger)count",
            "comment" : "Returns the total number of objects in the result set.",
            "name" : "count",
            "return" : "The number of objects in the result set that the controller has loaded based on paginationWindow."
          },
          {
            "declared" : "LYRQueryController.h",
            "declaration" : "- (BOOL)execute:(NSError *_Nullable *_Nullable)error",
            "comment" : "Executes the query and loads a result set into the receiver.",
            "name" : "execute:",
            "return" : "A Boolean value that indicates if execution of the query was successful.",
            "parameters" : [
              {
                "name" : "error",
                "description" : "A pointer to an error object that upon failure is set to an error object that describes\nthe nature of the failure."
              }
            ]
          },
          {
            "declared" : "LYRQueryController.h",
            "declaration" : "- (void)executeWithCompletion:(nonnull void ( ^ ) ( BOOL success , NSError *_Nonnull error ))completion",
            "comment" : "Executes the query asynchronously and loads a result and error in a completion block.",
            "name" : "executeWithCompletion:",
            "parameters" : [
              {
                "name" : "completion",
                "description" : "A block that passes back a BOOL if the execution of the query was successful, and an associated error object if there\nwas an error during execution."
              }
            ]
          },
          {
            "declared" : "LYRQueryController.h",
            "declaration" : "- (nullable NSIndexPath *)indexPathForObject:(nonnull id<LYRQueryable>)object",
            "comment" : "Returns the index path for the given object in the result set.",
            "name" : "indexPathForObject:",
            "return" : "The index path for the given object or nil if it does not exist in the result set.",
            "parameters" : [
              {
                "name" : "object",
                "description" : "The object to retrieve the index path for."
              }
            ]
          },
          {
            "declared" : "LYRQueryController.h",
            "declaration" : "- (nonnull NSDictionary *)indexPathsForObjectsWithIdentifiers:(nonnull NSSet *)objectIdentifiers",
            "comment" : "Returns a dictionary mapping the given set of object identifiers to the NSIndexPath values that indicate\nwhere in the query controller's result set the corresponding objects appear. Any object identifiers that are not in\nthe result set (or are outside the pagination window) will not have an entry in the dictionary returned.",
            "name" : "indexPathsForObjectsWithIdentifiers:",
            "return" : "A dictionary mapping the object identifiers that are part of the query controller results to the index path that appear at.",
            "parameters" : [
              {
                "name" : "objectIdentifiers",
                "description" : "The set of object identifiers to look up within the query controller."
              }
            ]
          },
          {
            "declared" : "LYRQueryController.h",
            "declaration" : "- (NSUInteger)numberOfObjectsInSection:(NSUInteger)section",
            "comment" : "Returns the number of objects in the given section in the result set.",
            "name" : "numberOfObjectsInSection:",
            "return" : "The number of objects in the specified section of the result set.",
            "parameters" : [
              {
                "name" : "section",
                "description" : "The section to return the number of objects for."
              }
            ]
          },
          {
            "declared" : "LYRQueryController.h",
            "declaration" : "- (NSUInteger)numberOfSections",
            "comment" : "Returns the number of sections in the result set.",
            "name" : "numberOfSections",
            "return" : "The number of sections in the receiver's result set."
          },
          {
            "declared" : "LYRQueryController.h",
            "declaration" : "- (nullable id)objectAtIndexPath:(nonnull NSIndexPath *)indexPath",
            "comment" : "Returns the object for the given index path from the result set.",
            "name" : "objectAtIndexPath:",
            "return" : "The object at the specified index or nil if none could be found.",
            "parameters" : [
              {
                "name" : "indexPath",
                "description" : "The index path for the object to retrieve."
              }
            ]
          }
        ]
      },
      "name" : "LYRQueryController",
      "inherits" : "NSObject"
    },
    {
      "declared" : "LYRSession.h",
      "properties" : [
        {
          "declared" : "LYRSession.h",
          "declaration" : "@property (nonatomic, readonly) LYRIdentity *authenticatedUser",
          "comment" : "The authenticated user for the session.",
          "name" : "authenticatedUser"
        },
        {
          "declared" : "LYRSession.h",
          "declaration" : "@property (nonatomic, readonly) NSString *databasePath",
          "comment" : "The database path for the underlying database for the session.",
          "name" : "databasePath"
        },
        {
          "declared" : "LYRSession.h",
          "declaration" : "@property (nonatomic, readonly) NSString *identifier",
          "comment" : "The identifier for the session.",
          "name" : "identifier"
        },
        {
          "declared" : "LYRSession.h",
          "declaration" : "@property (nonatomic, readonly) NSString *sessionPath",
          "comment" : "The path to which the session is persisted.",
          "name" : "sessionPath"
        },
        {
          "declared" : "LYRSession.h",
          "declaration" : "@property (nonatomic, readonly) LYRSessionState state",
          "comment" : "An enum value that describes the authentication state of the session.",
          "name" : "state"
        }
      ],
      "name" : "LYRSession",
      "inherits" : "NSObject"
    }
  ],
  "protocols" : [
    {
      "declared" : "LYRClient.h",
      "methods" : {
        "instance" : [
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)layerClient:(nonnull LYRClient *)client didAuthenticateAsUserID:(nonnull NSString *)userID",
            "comment" : "Tells the delegate that a client has successfully authenticated with Layer.",
            "name" : "layerClient:didAuthenticateAsUserID:",
            "parameters" : [
              {
                "name" : "client",
                "description" : "The client that has authenticated successfully."
              },
              {
                "name" : "userID",
                "description" : "The user identifier in Identity Provider from which the Identity Token was obtained. Typically the primary key, username, or email\n    of the user that was authenticated."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)layerClient:(nonnull LYRClient *)client didFailOperationWithError:(nonnull NSError *)error",
            "comment" : "Tells the delegate that an operation encountered an error during a local mutation or synchronization activity.",
            "name" : "layerClient:didFailOperationWithError:",
            "parameters" : [
              {
                "name" : "client",
                "description" : "The client that failed the operation."
              },
              {
                "name" : "error",
                "description" : "An error describing the nature of the operation failure."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)layerClient:(nonnull LYRClient *)client didFinishContentTransfer:(LYRContentTransferType)contentTransferType ofObject:(nonnull id)object",
            "comment" : "Tells the delegate that a content transfer has finished.",
            "name" : "layerClient:didFinishContentTransfer:ofObject:",
            "parameters" : [
              {
                "name" : "client",
                "description" : "The client that will begin the content transfer."
              },
              {
                "name" : "contentTransferType",
                "description" : "Type enum representing the content transfer type."
              },
              {
                "name" : "object",
                "description" : "Object whose content did finish transfering."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)layerClient:(nonnull LYRClient *)client didLoseConnectionWithError:(nonnull NSError *)error",
            "comment" : "Informs the delegate that the client has lost an established connection with Layer due to an error.",
            "name" : "layerClient:didLoseConnectionWithError:",
            "parameters" : [
              {
                "name" : "client",
                "description" : "The client that lost the connection."
              },
              {
                "name" : "error",
                "description" : "The error that occurred."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)layerClient:(nonnull LYRClient *)client didReceiveAuthenticationChallengeWithNonce:(nonnull NSString *)nonce",
            "comment" : "Tells the delegate that the server has issued an authentication challenge to the client and a new Identity Token must be submitted.",
            "name" : "layerClient:didReceiveAuthenticationChallengeWithNonce:",
            "discussion" : "At any time during the lifecycle of a Layer client session the server may issue an authentication challenge and require that\nthe client confirm its identity. When such a challenge is encountered, the client will immediately become deauthenticated and will no\nlonger be able to interact with communication services until reauthenticated. The nonce value issued with the challenge must be submitted\nto the remote identity provider in order to obtain a new Identity Token.",
            "parameters" : [
              {
                "name" : "client",
                "description" : "The client that received the authentication challenge."
              },
              {
                "name" : "nonce",
                "description" : "The nonce value associated with the challenge."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)layerClient:(nonnull LYRClient *)client objectsDidChange:(nonnull NSArray<LYRObjectChange*> *)changes",
            "comment" : "Tells the delegate that objects associated with the client have changed due to local mutation or synchronization activities.",
            "name" : "layerClient:objectsDidChange:",
            "parameters" : [
              {
                "name" : "client",
                "description" : "The client that received the changes."
              },
              {
                "name" : "changes",
                "description" : "An array of {@link LYRObjectChange} objects, each one describing a change."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)layerClient:(nonnull LYRClient *)client willAttemptToConnect:(NSUInteger)attemptNumber afterDelay:(NSTimeInterval)delayInterval maximumNumberOfAttempts:(NSUInteger)attemptLimit",
            "comment" : "Informs the delegate that the client is making an attempt to connect to Layer.",
            "name" : "layerClient:willAttemptToConnect:afterDelay:maximumNumberOfAttempts:",
            "parameters" : [
              {
                "name" : "client",
                "description" : "The client attempting the connection."
              },
              {
                "name" : "attemptNumber",
                "description" : "The current attempt (of the attempt limit) that is being made."
              },
              {
                "name" : "delayInterval",
                "description" : "The delay, if any, before the attempt will actually be made."
              },
              {
                "name" : "attemptLimit",
                "description" : "The total number of attempts that will be made before the client gives up."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)layerClient:(nonnull LYRClient *)client willBeginContentTransfer:(LYRContentTransferType)contentTransferType ofObject:(nonnull id)object withProgress:(nonnull LYRProgress *)progress",
            "comment" : "Tells the delegate that a content transfer will begin.",
            "name" : "layerClient:willBeginContentTransfer:ofObject:withProgress:",
            "parameters" : [
              {
                "name" : "client",
                "description" : "The client that will begin the content transfer."
              },
              {
                "name" : "contentTransferType",
                "description" : "Type enum representing the content transfer type."
              },
              {
                "name" : "object",
                "description" : "Object whose content will begin transfering."
              },
              {
                "name" : "progress",
                "description" : "The {@link LYRProgress} instance that tracks the progress of the object."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)layerClientDidConnect:(nonnull LYRClient *)client",
            "comment" : "Informs the delegate that the client has successfully connected to Layer.",
            "name" : "layerClientDidConnect:",
            "parameters" : [
              {
                "name" : "client",
                "description" : "The client that made the connection."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)layerClientDidDeauthenticate:(nonnull LYRClient *)client",
            "comment" : "Tells the delegate that a client has been deauthenticated.",
            "name" : "layerClientDidDeauthenticate:",
            "discussion" : "The client may become deauthenticated either by an explicit call to deauthenticateWithCompletion: or by encountering an authentication challenge.",
            "parameters" : [
              {
                "name" : "client",
                "description" : "The client that was deauthenticated."
              }
            ]
          },
          {
            "declared" : "LYRClient.h",
            "declaration" : "- (void)layerClientDidDisconnect:(nonnull LYRClient *)client",
            "comment" : "Informs the delegate that the client has disconnected from Layer.",
            "name" : "layerClientDidDisconnect:",
            "parameters" : [
              {
                "name" : "client",
                "description" : "The client that has disconnected."
              }
            ]
          }
        ]
      },
      "name" : "LYRClientDelegate",
      "conforms" : "NSObject"
    },
    {
      "declared" : "LYRProgress.h",
      "methods" : {
        "instance" : [
          {
            "declared" : "LYRProgress.h",
            "declaration" : "- (void)progressDidChange:(nonnull LYRProgress *)progress",
            "comment" : "Tells the delegate that the progress instance has changed.",
            "name" : "progressDidChange:",
            "discussion" : "Progress is observed via instance's fractionCompleted or completedUnitCount properties."
          }
        ]
      },
      "name" : "LYRProgressDelegate",
      "conforms" : "NSObject"
    },
    {
      "declared" : "LYRQueryController.h",
      "methods" : {
        "instance" : [
          {
            "declared" : "LYRQueryController.h",
            "declaration" : "- (void)queryController:(nonnull LYRQueryController *)controller didChangeObject:(nonnull id)object atIndexPath:(nullable NSIndexPath *)indexPath forChangeType:(LYRQueryControllerChangeType)type newIndexPath:(nullable NSIndexPath *)newIndexPath",
            "comment" : "Tells the delegate that a particular object in the result set of query controller has changed.",
            "name" : "queryController:didChangeObject:atIndexPath:forChangeType:newIndexPath:",
            "parameters" : [
              {
                "name" : "object",
                "description" : "The object that has changed in the result set."
              },
              {
                "name" : "indexPath",
                "description" : "The index path of the object or nil if the change is an insert."
              },
              {
                "name" : "type",
                "description" : "An enumerated value that specifies the type of change that is occurring."
              },
              {
                "name" : "newIndexPath",
                "description" : "The new index path for the object or nil if the change is an update or delete."
              },
              {
                "name" : "The",
                "description" : "query controller that is changing."
              }
            ]
          },
          {
            "declared" : "LYRQueryController.h",
            "declaration" : "- (void)queryControllerDidChangeContent:(nonnull LYRQueryController *)queryController",
            "comment" : "Tells the delegate that the result set of query controller has changed.",
            "name" : "queryControllerDidChangeContent:",
            "parameters" : [
              {
                "name" : "The",
                "description" : "query controller that has changed."
              }
            ]
          },
          {
            "declared" : "LYRQueryController.h",
            "declaration" : "- (void)queryControllerWillChangeContent:(nonnull LYRQueryController *)queryController",
            "comment" : "Tells the delegate that the result set of query controller is about to change.",
            "name" : "queryControllerWillChangeContent:",
            "parameters" : [
              {
                "name" : "The",
                "description" : "query controller that is changing."
              }
            ]
          }
        ]
      },
      "name" : "LYRQueryControllerDelegate",
      "conforms" : "NSObject"
    },
    {
      "declared" : "LYRQuery.h",
      "properties" : [
        {
          "declared" : "LYRQuery.h",
          "declaration" : "@property (nonatomic, readonly, nonnull) NSURL *identifier",
          "comment" : "Returns the unique identifier for the receiver as a URL.",
          "name" : "identifier"
        }
      ],
      "name" : "LYRQueryable",
      "conforms" : "NSObject"
    }
  ],
  "constants" : [
    {
      "declared" : "LYRErrors.h",
      "name" : "LYRClientError",
      "values" : [
        {
          "name" : "LYRClientErrorAlreadyConnected",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorInvalidAppID",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorNetworkRequestFailed",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorConnectionTimeout",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorAsyncTimeout",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorInvalidIdentifier",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorNotConnected",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorKeyPairNotFound",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorCertificateNotFound",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorIdentityNotFound",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorNotAuthenticated",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorAlreadyAuthenticated",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorInvalidToken",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorDeviceTokenInvalid",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorUndefinedSyncFailure",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorDevicePersistenceFailure",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorSynchronizationFailure",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorManualSyncIgnoredInForeground",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorManualSyncFailedNoConnection",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorManualSyncIgnoredAlreadyInProgress",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorManualSyncIgnoredAlreadyFullySynced",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorManualSyncIgnoredNothingToSync",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorZipArchiveCreationFailure",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorZipFileArchiveFailure",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorTempFileArchiveFailure",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorSnapshotCaptureFailure",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorNoFileLoggerPath",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorDatabaseBackupFailure",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorMessageDeleted",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorConversationDeleted",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorInvalidClassType",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorInvalidSession",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRClientErrorDuplicateSession",
          "declared" : "LYRErrors.h"
        }
      ]
    },
    {
      "declared" : "LYRConstants.h",
      "name" : "LYRClientSynchronizationPolicy",
      "values" : [
        {
          "name" : "LYRClientSynchronizationPolicyCompleteHistory",
          "comment" : "Client will perform the synchronization process by fetching the complete history for all conversations, using this sync policy.\n     ",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRClientSynchronizationPolicyUnreadOnly",
          "comment" : "Client will perform the synchronization process by fetching all the messages up to first unread message in for each conversation.\n     If all messages in a conversations have been marked as read, the client will fetch the last (most recent) message in the conversation in the initial sync.",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRClientSynchronizationPolicyMessageCount",
          "comment" : "Client will perform the synchronization process by fetching last few recent messages -- count is defined with the LYRClientOptionSynchronizationMessageCount key\n     that needs to be passed along in the options dictionary of the client initializer.\n     ",
          "declared" : "LYRConstants.h"
        }
      ]
    },
    {
      "declared" : "LYRPredicate.h",
      "name" : "LYRCompoundPredicateType",
      "values" : [
        {
          "name" : "LYRCompoundPredicateTypeAnd",
          "comment" : "A logical AND compound predicate type.\n     ",
          "declared" : "LYRPredicate.h"
        },
        {
          "name" : "LYRCompoundPredicateTypeOr",
          "comment" : "A logical OR compound predicate type.\n     ",
          "declared" : "LYRPredicate.h"
        },
        {
          "name" : "LYRCompoundPredicateTypeNot",
          "comment" : "A logical NOT compound predicate type.",
          "declared" : "LYRPredicate.h"
        }
      ]
    },
    {
      "declared" : "LYRMessagePart.h",
      "name" : "LYRContentTransferStatus",
      "values" : [
        {
          "name" : "LYRContentTransferAwaitingUpload",
          "comment" : "Content is available locally and is yet to be uploaded.",
          "declared" : "LYRMessagePart.h"
        },
        {
          "name" : "LYRContentTransferUploading",
          "comment" : "Content is available locally and is in a state of uploading.",
          "declared" : "LYRMessagePart.h"
        },
        {
          "name" : "LYRContentTransferReadyForDownload",
          "comment" : "Content is not available locally but it is ready for download.",
          "declared" : "LYRMessagePart.h"
        },
        {
          "name" : "LYRContentTransferDownloading",
          "comment" : "Content is not yet avaiable locally and is in a state of downloading.",
          "declared" : "LYRMessagePart.h"
        },
        {
          "name" : "LYRContentTransferComplete",
          "comment" : "This state is expected when the transfer completes.\n     ",
          "declared" : "LYRMessagePart.h"
        }
      ]
    },
    {
      "declared" : "LYRConstants.h",
      "name" : "LYRContentTransferType",
      "values" : [
        {
          "name" : "LYRContentTransferTypeDownload",
          "comment" : "The {@link LYRContentTransferType} values describe the type of a transfer. Used when {@link LYRClient} calls to the delegate via layerClient:willBeginContentTransfer:ofObject:withProgress and layerClient:didFinishContentTransfer:ofObject: methods.",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRContentTransferTypeUpload",
          "comment" : "The {@link LYRContentTransferType} values describe the type of a transfer. Used when {@link LYRClient} calls to the delegate via layerClient:willBeginContentTransfer:ofObject:withProgress and layerClient:didFinishContentTransfer:ofObject: methods.",
          "declared" : "LYRConstants.h"
        }
      ]
    },
    {
      "declared" : "LYRConstants.h",
      "name" : "LYRDeletionMode",
      "values" : [
        {
          "name" : "LYRDeletionModeMyDevices",
          "comment" : "Content is deleted for only the currently authenticated user. The deletion will also be synchronized \n     among all other devices for the current user.\n     ",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRDeletionModeAllParticipants",
          "comment" : "Content is deleted from all devices of all participants. This is a synchronized, permanent delete\n     that results in content being deleted from the devices of existing users who have previously synchronized and\n     makes the content unavailable for synchronization to new participants or devices.\n     *",
          "declared" : "LYRConstants.h"
        }
      ]
    },
    {
      "declared" : "LYRErrors.h",
      "name" : "LYRError",
      "values" : [
        {
          "name" : "LYRErrorUnknownError",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorUnauthenticated",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorInvalidMessage",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorTooManyParticipants",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorDataLengthExceedsMaximum",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorMessageAlreadyMarkedAsRead",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorObjectNotSent",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorMessagePartContentAlreadyAvailable",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorMessagePartContentAlreadyPurged",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorMessagePartContentInlined",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorConversationAlreadyDeleted",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorUserNotAParticipantInConversation",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorImmutableParticipantsList",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorDistinctConversationExists",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorParticipantNotAParticipantInConversation",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorDistinctDeletedConversationExists",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorParticipantsContainsBlockedUser",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorInvalidKey",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorInvalidValue",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorPolicyValidationFailure",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorPolicyNotFound",
          "declared" : "LYRErrors.h"
        },
        {
          "name" : "LYRErrorQueryControllerExecutionFailure",
          "declared" : "LYRErrors.h"
        }
      ]
    },
    {
      "declared" : "LYRConstants.h",
      "name" : "LYRLogComponent",
      "values" : [
        {
          "name" : "LYRLogComponentUndefined",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentInitialization",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentCertification",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentAuthentication",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentTransport",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentTransportPush",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentPlatformPush",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentModel",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentSQLite",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentSynchronization",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentInboundReconciliation",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentOutboundReconciliation",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentMessagingPublicAPI",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentRichContent",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentApplicationState",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogComponentCount",
          "declared" : "LYRConstants.h"
        }
      ]
    },
    {
      "declared" : "LYRConstants.h",
      "name" : "LYRLogLevel",
      "values" : [
        {
          "name" : "LYRLogLevelOff",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogLevelError",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogLevelWarn",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogLevelInfo",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogLevelDebug",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRLogLevelVerbose",
          "declared" : "LYRConstants.h"
        }
      ]
    },
    {
      "declared" : "LYRConstants.h",
      "name" : "LYRMessageSyncOptions",
      "values" : [
        {
          "name" : "LYRMessageSyncAll",
          "comment" : "Using this option with [conversation synchronizeAllMessages:error:] method will\n     tell the client to synchronize all messages for that conversation.\n     ",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRMessageSyncToFirstUnread",
          "comment" : "Using this option with [conversation synchronizeAllMessages:error:] method will\n     tell the client to synchronize all messages up to the first unread mesasge in that conversation.\n     ",
          "declared" : "LYRConstants.h"
        }
      ]
    },
    {
      "declared" : "LYRConstants.h",
      "name" : "LYRObjectChangeType",
      "values" : [
        {
          "name" : "LYRObjectChangeTypeCreate",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRObjectChangeTypeUpdate",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRObjectChangeTypeDelete",
          "declared" : "LYRConstants.h"
        }
      ]
    },
    {
      "declared" : "LYRPolicy.h",
      "name" : "LYRPolicyType",
      "values" : [
        {
          "name" : "LYRPolicyTypeBlock",
          "comment" : "Defines a policy which will block a matching entity from communicating with the target.\n     ",
          "declared" : "LYRPolicy.h"
        }
      ]
    },
    {
      "declared" : "LYRPredicate.h",
      "name" : "LYRPredicateOperator",
      "values" : [
        {
          "name" : "LYRPredicateOperatorIsEqualTo",
          "comment" : "The property's value is equal to the given value.\n     ",
          "declared" : "LYRPredicate.h"
        },
        {
          "name" : "LYRPredicateOperatorIsNotEqualTo",
          "comment" : "The property's value is not equal to the given value.\n     ",
          "declared" : "LYRPredicate.h"
        },
        {
          "name" : "LYRPredicateOperatorIsLessThan",
          "comment" : "The property's value is less than the given value.\n     ",
          "declared" : "LYRPredicate.h"
        },
        {
          "name" : "LYRPredicateOperatorIsLessThanOrEqualTo",
          "comment" : "The property's value is less than or equal to the given value.\n     ",
          "declared" : "LYRPredicate.h"
        },
        {
          "name" : "LYRPredicateOperatorIsGreaterThan",
          "comment" : "The property's value is greater than the given value.\n     ",
          "declared" : "LYRPredicate.h"
        },
        {
          "name" : "LYRPredicateOperatorIsGreaterThanOrEqualTo",
          "comment" : "The property's value is greater than or equal to the given value.\n     ",
          "declared" : "LYRPredicate.h"
        },
        {
          "name" : "LYRPredicateOperatorIsIn",
          "comment" : "The property's value is contained in the given collection of values.\n     ",
          "declared" : "LYRPredicate.h"
        },
        {
          "name" : "LYRPredicateOperatorIsNotIn",
          "comment" : "The property's value is not contained in the given collection of values.\n     ",
          "declared" : "LYRPredicate.h"
        },
        {
          "name" : "LYRPredicateOperatorLike",
          "comment" : "The property's value partial string matches the given value.\n     ",
          "declared" : "LYRPredicate.h"
        }
      ]
    },
    {
      "declared" : "LYRQueryController.h",
      "name" : "LYRQueryControllerChangeType",
      "values" : [
        {
          "name" : "LYRQueryControllerChangeTypeInsert",
          "comment" : "An object is being inserted into the result set.\n     ",
          "declared" : "LYRQueryController.h"
        },
        {
          "name" : "LYRQueryControllerChangeTypeDelete",
          "comment" : "An object is being deleted from the result set.\n     ",
          "declared" : "LYRQueryController.h"
        },
        {
          "name" : "LYRQueryControllerChangeTypeMove",
          "comment" : "An object is being moved within the result set.\n     ",
          "declared" : "LYRQueryController.h"
        },
        {
          "name" : "LYRQueryControllerChangeTypeUpdate",
          "comment" : "An object in the result set has changed state.\n     ",
          "declared" : "LYRQueryController.h"
        }
      ]
    },
    {
      "declared" : "LYRQuery.h",
      "name" : "LYRQueryError",
      "values" : [
        {
          "name" : "LYRQueryErrorUnqueryableProperty",
          "comment" : "Codes for errors in the LYRQueryingErrorDomain error domain.",
          "declared" : "LYRQuery.h"
        },
        {
          "name" : "LYRQueryErrorUnsupportedPredicate",
          "comment" : "Codes for errors in the LYRQueryingErrorDomain error domain.",
          "declared" : "LYRQuery.h"
        },
        {
          "name" : "LYRQueryErrorUnsupportedSortDescriptor",
          "comment" : "Codes for errors in the LYRQueryingErrorDomain error domain.",
          "declared" : "LYRQuery.h"
        }
      ]
    },
    {
      "declared" : "LYRQuery.h",
      "name" : "LYRQueryResultType",
      "values" : [
        {
          "name" : "LYRQueryResultTypeObjects",
          "comment" : "The query is to return fully realized object instances.\n     ",
          "declared" : "LYRQuery.h"
        },
        {
          "name" : "LYRQueryResultTypeIdentifiers",
          "comment" : "The query is to return object identifier URL objects.\n     ",
          "declared" : "LYRQuery.h"
        },
        {
          "name" : "LYRQueryResultTypeCount",
          "comment" : "The query is to return a count of the number of results it would return if executed.\n     ",
          "declared" : "LYRQuery.h"
        }
      ]
    },
    {
      "declared" : "LYRMessage.h",
      "name" : "LYRRecipientStatus",
      "values" : [
        {
          "name" : "LYRRecipientStatusInvalid",
          "comment" : "Status for the recipient cannot be determined because the message is not in a state in which recipient status can be evaluated or the user is not a participant in the Conversation.",
          "declared" : "LYRMessage.h"
        },
        {
          "name" : "LYRRecipientStatusPending",
          "comment" : "The message has been transported to Layer and is awaiting synchronization by the recipient's devices.",
          "declared" : "LYRMessage.h"
        },
        {
          "name" : "LYRRecipientStatusSent",
          "comment" : "The message has been transported to Layer and is awaiting synchronization by the recipient's devices.",
          "declared" : "LYRMessage.h"
        },
        {
          "name" : "LYRRecipientStatusDelivered",
          "comment" : "The message has been synchronized to at least one device for a recipient but has not been marked as read.",
          "declared" : "LYRMessage.h"
        },
        {
          "name" : "LYRRecipientStatusRead",
          "comment" : "The message has been marked as read by one of the recipient's devices.",
          "declared" : "LYRMessage.h"
        }
      ]
    },
    {
      "declared" : "LYRSession.h",
      "name" : "LYRSessionState",
      "values" : [
        {
          "name" : "LYRSessionStateUnauthenticated",
          "declared" : "LYRSession.h"
        },
        {
          "name" : "LYRSessionStateAuthenticated",
          "declared" : "LYRSession.h"
        },
        {
          "name" : "LYRSessionStateChallenged",
          "declared" : "LYRSession.h"
        }
      ]
    },
    {
      "declared" : "LYRConstants.h",
      "name" : "LYRTypingIndicator",
      "values" : [
        {
          "name" : "LYRTypingDidBegin",
          "comment" : "The {@link LYRTypingIndicator} enumeration describes the states of a typing status of a participant in a conversation.",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRTypingDidPause",
          "comment" : "The {@link LYRTypingIndicator} enumeration describes the states of a typing status of a participant in a conversation.",
          "declared" : "LYRConstants.h"
        },
        {
          "name" : "LYRTypingDidFinish",
          "comment" : "The {@link LYRTypingIndicator} enumeration describes the states of a typing status of a participant in a conversation.",
          "declared" : "LYRConstants.h"
        }
      ]
    }
  ],
  "categories" : [

  ]
}